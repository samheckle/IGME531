<!doctype html>
<html lang='en'>

<head>
  <style>
    body {
      margin: 0
    }
  </style>
</head>

<body>
  <canvas id='gl'></canvas>
  <canvas id='texture'></canvas>
</body>
<!-- vertex shader -->
<script id='vertex' type='x-shader/x-vertex'>
  attribute vec2 a_position; 
  attribute vec2 aTextureCoord;
  
  varying vec2 vTexCoord;
  void main() { 
    vTexCoord = aTextureCoord;
    gl_Position = vec4( a_position, 0, 1 ); 
  }
</script>

<!-- fragment shader -->
<script id='fragment' type='x-shader/x-fragment'>
  precision mediump float;
  varying vec2 vTexCoord;

  uniform sampler2D uSampler;
  void main() { 
    gl_FragColor = texture2D(uSampler, vec2(vTexCoord.s, vTexCoord.t)); 
  }
</script>


<script type='text/javascript'>
  let gl, canvas,
    init, render, buffer,
    shaderScript, shaderSource, vertexShader, fragmentShader, program, textureCanvas, textureCtx

  let gridSize=20
  let currentGrid =[]
  let nextGrid = []

  window.onload = function () {
    canvas = document.getElementById('gl')
    gl = canvas.getContext('webgl')
    canvas.width = canvas.height = 512

    textureCanvas = document.getElementById('texture')
    textureCanvas.width = textureCanvas.height = 512;
    textureCtx = textureCanvas.getContext('2d')

    textureCanvas.style.display = 'none'

    // set up grid
    for (let i = 0; i < gridSize; i++) {
        currentGrid[i] = []
        nextGrid[i] = []
        for (let j = 0; j < gridSize; j++) {
          if (j == 0 || i == 0 || j == gridSize - 1 || i == gridSize - 1) {
            currentGrid[i][j] = 0;
          } 
          else
            currentGrid[i][j] = Math.random() > .8 ? 1 : 0
          nextGrid[i][j] = 0
        }
      }
      console.log(currentGrid)

    // define drawing area of canvas. bottom corner, width / height
    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight)

    // create a buffer object to store vertices
    buffer = gl.createBuffer()

    // point buffer at graphic context's ARRAY_BUFFER
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)

    var triangles = new Float32Array([-1, -1,
      1, -1, -1, 1, -1, 1,
      1, -1,
      1, 1
    ])

    // initialize memory for buffer and populate it. Give
    // open gl hint contents will not change dynamically.
    gl.bufferData(gl.ARRAY_BUFFER, triangles, gl.STATIC_DRAW)

    // create vertex shader
    shaderScript = document.getElementById('vertex')
    shaderSource = shaderScript.text
    vertexShader = gl.createShader(gl.VERTEX_SHADER)
    gl.shaderSource(vertexShader, shaderSource);
    gl.compileShader(vertexShader)

    // create fragment shader
    shaderScript = document.getElementById('fragment')
    shaderSource = shaderScript.text
    fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)
    gl.shaderSource(fragmentShader, shaderSource);
    gl.compileShader(fragmentShader)

    // create shader program
    program = gl.createProgram()
    gl.attachShader(program, vertexShader)
    gl.attachShader(program, fragmentShader)
    gl.linkProgram(program)
    gl.useProgram(program)
    //window.requestAnimationFrame( render, canvas )

    // get position
    var position = gl.getAttribLocation(program, 'a_position')
    gl.enableVertexAttribArray(position)
    gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0)

    // draw triangles using the array buffer from index 0 to 6 (6 is count)
    //gl.drawArrays( gl.TRIANGLES, 0, 6 )
    program.textureCoordAttribute = gl.getAttribLocation(program, 'aTextureCoord')
    gl.enableVertexAttribArray(program.textureCoordAttribute)
    gl.vertexAttribPointer(program.textureCoordAttribute, 2, gl.FLOAT, false, 0, 0)

    program.samplerUniform = gl.getUniformLocation(program, 'uSampler')
    gl.uniform1i(program.samplerUniform, 0)

    texture = gl.createTexture()
    render()
  }

  getTexture = function(){
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true)

    gl.bindTexture(gl.TEXTURE_2D, texture)
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureCanvas)

    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)
  }

  webglSetup = function(){
    gl.clearColor(1.0,1.0,1.0,1.0)
    gl.clear(gl.COLOR_BUFFER_BIT)
    gl.activeTexture(gl.TEXTURE0)
  }

  canvasDraw = function(){
    //textureCtx.fillStyle = 'teal'
    //textureCtx.fillRect(0, 0, textureCanvas.width, textureCanvas.height)
    // Loop through every spot in our 2D array and check spots neighbors
    for (let x = 1; x < gridSize - 1; x++) {
        for (let y = 1; y < gridSize - 1; y++) {
          // Add up all the states in a 3x3 surrounding grid
          let count = 0;
          for (let i = -1; i <= 1; i++) {
            for (let j = -1; j <= 1; j++) {
              count += currentGrid[x + i][y + j];
            }
          }
          count -= currentGrid[x][y];
          // Rules of Life
          if ((currentGrid[x][y] == 1) && (count < 2 )) nextGrid[x][y] = 0;
          else if ((currentGrid[x][y] == 1) && (count > 3)) nextGrid[x][y] = 0;
          else if ((currentGrid[x][y] == 0) && (count ==3 )) nextGrid[x][y] = 1;
          else if ((count ==4 )) nextGrid[x][y] = 1;
          else nextGrid[x][y] = currentGrid[x][y];
        }
      }

      // assign values in nextGrid to curGrid
    let swap = currentGrid
    currentGrid = nextGrid
    nextGrid = swap

    // draw to your canvas here
    textureCtx.fillStyle = '#CCE6F4'
    textureCtx.fillRect(0, 0, textureCanvas.width, textureCanvas.height)

    let cellWidth = textureCanvas.width / gridSize
    let cellHeight = textureCanvas.height / gridSize
    var count = 0;
    for (let i = 0; i < gridSize; i++) {
      let row = currentGrid[i]
      let yPos = i * cellHeight

      for (let j = 0; j < gridSize; j++) {
        let cell = row[j]

        if (cell === 1) {
          let xPos = j * cellWidth
          if (currentGrid[i][j] == nextGrid[i][j]) {
            textureCtx.fillStyle = '#175676'
            textureCtx.strokeStyle = '#175676'
          } else {
            textureCtx.fillStyle = '#4BA3C3'
            textureCtx.strokeStyle = '#4BA3C3'
          }
          count++;
          textureCtx.strokeRect(xPos, yPos, cellWidth, cellHeight)
          textureCtx.fillRect(xPos, yPos, cellWidth, cellHeight)
        }
      }
    }
    console.log("running")
  }

  render = function () {
    window.requestAnimationFrame(render, canvas)
    webglSetup()

    canvasDraw()

    getTexture()

    gl.drawArrays(gl.TRIANGLES, 0,6)
  }
</script>

</html>